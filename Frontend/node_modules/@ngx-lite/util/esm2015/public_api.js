/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var KeyCodes = {
    LeftArrow: 37,
    UpArrow: 38,
    RightArrow: 39,
    DownArrow: 40,
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Escape: 27,
};
export { KeyCodes };
KeyCodes[KeyCodes.LeftArrow] = 'LeftArrow';
KeyCodes[KeyCodes.UpArrow] = 'UpArrow';
KeyCodes[KeyCodes.RightArrow] = 'RightArrow';
KeyCodes[KeyCodes.DownArrow] = 'DownArrow';
KeyCodes[KeyCodes.Backspace] = 'Backspace';
KeyCodes[KeyCodes.Tab] = 'Tab';
KeyCodes[KeyCodes.Enter] = 'Enter';
KeyCodes[KeyCodes.Escape] = 'Escape';
/**
 * @param {?} elm
 * @return {?}
 */
export function trapTabFocus(elm) {
    /** @type {?} */
    const focusableEls = elm.querySelectorAll('a, object, input, button, iframe, [tabindex]');
    /** @type {?} */
    const firstFocusableEl = /** @type {?} */ (focusableEls[0]);
    /** @type {?} */
    const lastFocusableEl = /** @type {?} */ (focusableEls[focusableEls.length - 1]);
    // if just a single focusable item focus it
    if (firstFocusableEl) {
        firstFocusableEl.focus();
    }
    // if two or more focusable items create focus loop
    if (firstFocusableEl && lastFocusableEl) {
        elm.addEventListener('keydown', e => {
            /** @type {?} */
            const isTabPressed = e.key === 'Tab' || e.keyCode === KeyCodes.Tab;
            if (!isTabPressed) {
                return;
            }
            if (e.shiftKey && document.activeElement === firstFocusableEl) {
                lastFocusableEl.focus();
                e.preventDefault();
            }
            else {
                if (document.activeElement === lastFocusableEl) {
                    firstFocusableEl.focus();
                    e.preventDefault();
                }
            }
        });
    }
}
/**
 * @return {?}
 */
export function isBrowser() {
    return typeof window !== 'undefined';
}
/**
 * @return {?}
 */
export function lockScroll() {
    if (isBrowser()) {
        document.body.style.overflow = 'hidden';
    }
}
/**
 * @return {?}
 */
export function unlockScroll() {
    if (isBrowser()) {
        document.body.style.overflow = 'initial';
    }
}
/**
 * @return {?}
 */
export function ariaHideBody() {
    if (isBrowser()) {
        document.body.setAttribute('aria-hidden', 'true');
    }
}
/**
 * @return {?}
 */
export function ariaShowBody() {
    if (isBrowser()) {
        document.body.setAttribute('aria-hidden', 'false');
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbGl0ZS91dGlsLyIsInNvdXJjZXMiOlsicHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7SUFDRSxhQUFjO0lBQ2QsV0FBWTtJQUNaLGNBQWU7SUFDZixhQUFjO0lBQ2QsWUFBYTtJQUNiLE1BQU87SUFDUCxTQUFVO0lBQ1YsVUFBVzs7O2tCQVBYLFNBQVM7a0JBQ1QsT0FBTztrQkFDUCxVQUFVO2tCQUNWLFNBQVM7a0JBQ1QsU0FBUztrQkFDVCxHQUFHO2tCQUNILEtBQUs7a0JBQ0wsTUFBTTs7Ozs7QUFHUixNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQWdCOztJQUMzQyxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQ3ZDLDhDQUE4QyxDQUMvQyxDQUFDOztJQUNGLE1BQU0sZ0JBQWdCLHFCQUFHLFlBQVksQ0FBQyxDQUFDLENBQWdCLEVBQUM7O0lBQ3hELE1BQU0sZUFBZSxxQkFBRyxZQUFZLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQWdCLEVBQUM7O0lBRzdFLElBQUksZ0JBQWdCLEVBQUU7UUFDcEIsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDMUI7O0lBR0QsSUFBSSxnQkFBZ0IsSUFBSSxlQUFlLEVBQUU7UUFDdkMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRTs7WUFDbEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBRW5FLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLGdCQUFnQixFQUFFO2dCQUM3RCxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUNwQjtpQkFBTTtnQkFDTCxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssZUFBZSxFQUFFO29CQUM5QyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDekIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUNwQjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7Q0FDRjs7OztBQUVELE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE9BQU8sT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDO0NBQ3RDOzs7O0FBRUQsTUFBTSxVQUFVLFVBQVU7SUFDeEIsSUFBSSxTQUFTLEVBQUUsRUFBRTtRQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7S0FDekM7Q0FDRjs7OztBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLElBQUksU0FBUyxFQUFFLEVBQUU7UUFDZixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0tBQzFDO0NBQ0Y7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWTtJQUMxQixJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ25EO0NBQ0Y7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWTtJQUMxQixJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3BEO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBLZXlDb2RlcyB7XHJcbiAgTGVmdEFycm93ID0gMzcsXHJcbiAgVXBBcnJvdyA9IDM4LFxyXG4gIFJpZ2h0QXJyb3cgPSAzOSxcclxuICBEb3duQXJyb3cgPSA0MCxcclxuICBCYWNrc3BhY2UgPSA4LFxyXG4gIFRhYiA9IDksXHJcbiAgRW50ZXIgPSAxMyxcclxuICBFc2NhcGUgPSAyN1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJhcFRhYkZvY3VzKGVsbTogSFRNTEVsZW1lbnQpIHtcclxuICBjb25zdCBmb2N1c2FibGVFbHMgPSBlbG0ucXVlcnlTZWxlY3RvckFsbChcclxuICAgICdhLCBvYmplY3QsIGlucHV0LCBidXR0b24sIGlmcmFtZSwgW3RhYmluZGV4XSdcclxuICApO1xyXG4gIGNvbnN0IGZpcnN0Rm9jdXNhYmxlRWwgPSBmb2N1c2FibGVFbHNbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgY29uc3QgbGFzdEZvY3VzYWJsZUVsID0gZm9jdXNhYmxlRWxzW2ZvY3VzYWJsZUVscy5sZW5ndGggLSAxXSBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgLy8gaWYganVzdCBhIHNpbmdsZSBmb2N1c2FibGUgaXRlbSBmb2N1cyBpdFxyXG4gIGlmIChmaXJzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICBmaXJzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBpZiB0d28gb3IgbW9yZSBmb2N1c2FibGUgaXRlbXMgY3JlYXRlIGZvY3VzIGxvb3BcclxuICBpZiAoZmlyc3RGb2N1c2FibGVFbCAmJiBsYXN0Rm9jdXNhYmxlRWwpIHtcclxuICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XHJcbiAgICAgIGNvbnN0IGlzVGFiUHJlc3NlZCA9IGUua2V5ID09PSAnVGFiJyB8fCBlLmtleUNvZGUgPT09IEtleUNvZGVzLlRhYjtcclxuXHJcbiAgICAgIGlmICghaXNUYWJQcmVzc2VkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZS5zaGlmdEtleSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBmaXJzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgbGFzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBsYXN0Rm9jdXNhYmxlRWwpIHtcclxuICAgICAgICAgIGZpcnN0Rm9jdXNhYmxlRWwuZm9jdXMoKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcclxuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2NrU2Nyb2xsKCkge1xyXG4gIGlmIChpc0Jyb3dzZXIoKSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVubG9ja1Njcm9sbCgpIHtcclxuICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaW5pdGlhbCc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGVCb2R5KCkge1xyXG4gIGlmIChpc0Jyb3dzZXIoKSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmlhU2hvd0JvZHkoKSB7XHJcbiAgaWYgKGlzQnJvd3NlcigpKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcclxuICB9XHJcbn1cclxuIl19