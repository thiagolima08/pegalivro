(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/util', ['exports'], factory) :
    (factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite'].util = {})));
}(this, (function (exports) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var KeyCodes = {
        LeftArrow: 37,
        UpArrow: 38,
        RightArrow: 39,
        DownArrow: 40,
        Backspace: 8,
        Tab: 9,
        Enter: 13,
        Escape: 27,
    };
    KeyCodes[KeyCodes.LeftArrow] = 'LeftArrow';
    KeyCodes[KeyCodes.UpArrow] = 'UpArrow';
    KeyCodes[KeyCodes.RightArrow] = 'RightArrow';
    KeyCodes[KeyCodes.DownArrow] = 'DownArrow';
    KeyCodes[KeyCodes.Backspace] = 'Backspace';
    KeyCodes[KeyCodes.Tab] = 'Tab';
    KeyCodes[KeyCodes.Enter] = 'Enter';
    KeyCodes[KeyCodes.Escape] = 'Escape';
    /**
     * @param {?} elm
     * @return {?}
     */
    function trapTabFocus(elm) {
        /** @type {?} */
        var focusableEls = elm.querySelectorAll('a, object, input, button, iframe, [tabindex]');
        /** @type {?} */
        var firstFocusableEl = /** @type {?} */ (focusableEls[0]);
        /** @type {?} */
        var lastFocusableEl = /** @type {?} */ (focusableEls[focusableEls.length - 1]);
        // if just a single focusable item focus it
        if (firstFocusableEl) {
            firstFocusableEl.focus();
        }
        // if two or more focusable items create focus loop
        if (firstFocusableEl && lastFocusableEl) {
            elm.addEventListener('keydown', function (e) {
                /** @type {?} */
                var isTabPressed = e.key === 'Tab' || e.keyCode === KeyCodes.Tab;
                if (!isTabPressed) {
                    return;
                }
                if (e.shiftKey && document.activeElement === firstFocusableEl) {
                    lastFocusableEl.focus();
                    e.preventDefault();
                }
                else {
                    if (document.activeElement === lastFocusableEl) {
                        firstFocusableEl.focus();
                        e.preventDefault();
                    }
                }
            });
        }
    }
    /**
     * @return {?}
     */
    function isBrowser() {
        return typeof window !== 'undefined';
    }
    /**
     * @return {?}
     */
    function lockScroll() {
        if (isBrowser()) {
            document.body.style.overflow = 'hidden';
        }
    }
    /**
     * @return {?}
     */
    function unlockScroll() {
        if (isBrowser()) {
            document.body.style.overflow = 'initial';
        }
    }
    /**
     * @return {?}
     */
    function ariaHideBody() {
        if (isBrowser()) {
            document.body.setAttribute('aria-hidden', 'true');
        }
    }
    /**
     * @return {?}
     */
    function ariaShowBody() {
        if (isBrowser()) {
            document.body.setAttribute('aria-hidden', 'false');
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.trapTabFocus = trapTabFocus;
    exports.isBrowser = isBrowser;
    exports.lockScroll = lockScroll;
    exports.unlockScroll = unlockScroll;
    exports.ariaHideBody = ariaHideBody;
    exports.ariaShowBody = ariaShowBody;
    exports.KeyCodes = KeyCodes;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxpdGUtdXRpbC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZ3gtbGl0ZS91dGlsL3B1YmxpY19hcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gS2V5Q29kZXMge1xyXG4gIExlZnRBcnJvdyA9IDM3LFxyXG4gIFVwQXJyb3cgPSAzOCxcclxuICBSaWdodEFycm93ID0gMzksXHJcbiAgRG93bkFycm93ID0gNDAsXHJcbiAgQmFja3NwYWNlID0gOCxcclxuICBUYWIgPSA5LFxyXG4gIEVudGVyID0gMTMsXHJcbiAgRXNjYXBlID0gMjdcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYXBUYWJGb2N1cyhlbG06IEhUTUxFbGVtZW50KSB7XHJcbiAgY29uc3QgZm9jdXNhYmxlRWxzID0gZWxtLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnYSwgb2JqZWN0LCBpbnB1dCwgYnV0dG9uLCBpZnJhbWUsIFt0YWJpbmRleF0nXHJcbiAgKTtcclxuICBjb25zdCBmaXJzdEZvY3VzYWJsZUVsID0gZm9jdXNhYmxlRWxzWzBdIGFzIEhUTUxFbGVtZW50O1xyXG4gIGNvbnN0IGxhc3RGb2N1c2FibGVFbCA9IGZvY3VzYWJsZUVsc1tmb2N1c2FibGVFbHMubGVuZ3RoIC0gMV0gYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8vIGlmIGp1c3QgYSBzaW5nbGUgZm9jdXNhYmxlIGl0ZW0gZm9jdXMgaXRcclxuICBpZiAoZmlyc3RGb2N1c2FibGVFbCkge1xyXG4gICAgZmlyc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgLy8gaWYgdHdvIG9yIG1vcmUgZm9jdXNhYmxlIGl0ZW1zIGNyZWF0ZSBmb2N1cyBsb29wXHJcbiAgaWYgKGZpcnN0Rm9jdXNhYmxlRWwgJiYgbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xyXG4gICAgICBjb25zdCBpc1RhYlByZXNzZWQgPSBlLmtleSA9PT0gJ1RhYicgfHwgZS5rZXlDb2RlID09PSBLZXlDb2Rlcy5UYWI7XHJcblxyXG4gICAgICBpZiAoIWlzVGFiUHJlc3NlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGUuc2hpZnRLZXkgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZmlyc3RGb2N1c2FibGVFbCkge1xyXG4gICAgICAgIGxhc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgICBmaXJzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9ja1Njcm9sbCgpIHtcclxuICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1bmxvY2tTY3JvbGwoKSB7XHJcbiAgaWYgKGlzQnJvd3NlcigpKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2luaXRpYWwnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRlQm9keSgpIHtcclxuICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJpYVNob3dCb2R5KCkge1xyXG4gIGlmIChpc0Jyb3dzZXIoKSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7UUFDRSxhQUFjO1FBQ2QsV0FBWTtRQUNaLGNBQWU7UUFDZixhQUFjO1FBQ2QsWUFBYTtRQUNiLE1BQU87UUFDUCxTQUFVO1FBQ1YsVUFBVzs7c0JBUFgsU0FBUztzQkFDVCxPQUFPO3NCQUNQLFVBQVU7c0JBQ1YsU0FBUztzQkFDVCxTQUFTO3NCQUNULEdBQUc7c0JBQ0gsS0FBSztzQkFDTCxNQUFNOzs7OztBQUdSLGFBQWdCLFlBQVksQ0FBQyxHQUFnQjs7UUFDM0MsSUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUN2Qyw4Q0FBOEMsQ0FDL0MsQ0FBQzs7UUFDRixJQUFNLGdCQUFnQixxQkFBRyxZQUFZLENBQUMsQ0FBQyxDQUFnQixFQUFDOztRQUN4RCxJQUFNLGVBQWUscUJBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFnQixFQUFDOztRQUc3RSxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzFCOztRQUdELElBQUksZ0JBQWdCLElBQUksZUFBZSxFQUFFO1lBQ3ZDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBQSxDQUFDOztnQkFDL0IsSUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDO2dCQUVuRSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNqQixPQUFPO2lCQUNSO2dCQUVELElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLGdCQUFnQixFQUFFO29CQUM3RCxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFDcEI7cUJBQU07b0JBQ0wsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLGVBQWUsRUFBRTt3QkFDOUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBQ3pCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztxQkFDcEI7aUJBQ0Y7YUFDRixDQUFDLENBQUM7U0FDSjtLQUNGOzs7O0FBRUQsYUFBZ0IsU0FBUztRQUN2QixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztLQUN0Qzs7OztBQUVELGFBQWdCLFVBQVU7UUFDeEIsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDekM7S0FDRjs7OztBQUVELGFBQWdCLFlBQVk7UUFDMUIsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7U0FDMUM7S0FDRjs7OztBQUVELGFBQWdCLFlBQVk7UUFDMUIsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNuRDtLQUNGOzs7O0FBRUQsYUFBZ0IsWUFBWTtRQUMxQixJQUFJLFNBQVMsRUFBRSxFQUFFO1lBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3BEO0tBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9