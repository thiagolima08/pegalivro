{"version":3,"sources":["ng://@ngx-lite/util/public_api.ts"],"names":["LeftArrow","UpArrow","RightArrow","DownArrow","Backspace","Tab","Enter","Escape","isBrowser","window","trapTabFocus","elm","focusableEls","querySelectorAll","firstFocusableEl","lastFocusableEl","length","focus","addEventListener","e","key","keyCode","KeyCodes","shiftKey","document","activeElement","preventDefault","lockScroll","body","style","overflow","unlockScroll","ariaHideBody","setAttribute","ariaShowBody"],"mappings":"6PACEA,UAAA,GACAC,QAAA,GACAC,WAAA,GACAC,UAAA,GACAC,UAAA,EACAC,IAAA,EACAC,MAAA,GACAC,OAAA,IAqCF,SAAgBC,IACd,MAAyB,oBAAXC,WA7CdT,WAAS,gBACTC,SAAO,cACPC,YAAU,iBACVC,WAAS,gBACTC,WAAS,gBACTC,KAAG,UACHC,OAAK,YACLC,QAAM,wBAGR,SAAgBG,EAAaC,GAC3B,IAAMC,EAAeD,EAAIE,iBACvB,gDAEIC,EAAmBF,EAAa,GAChCG,EAAkBH,EAAaA,EAAaI,OAAS,GAGvDF,GACFA,EAAiBG,QAIfH,GAAoBC,GACtBJ,EAAIO,iBAAiB,UAAW,SAAAC,IACC,QAAVA,EAAEC,KAAiBD,EAAEE,UAAYC,EAASjB,OAM3Dc,EAAEI,UAAYC,SAASC,gBAAkBX,GAC3CC,EAAgBE,QAChBE,EAAEO,kBAEEF,SAASC,gBAAkBV,IAC7BD,EAAiBG,QACjBE,EAAEO,iDAWZ,SAAgBC,IACVnB,MACFgB,SAASI,KAAKC,MAAMC,SAAW,0BAInC,SAAgBC,IACVvB,MACFgB,SAASI,KAAKC,MAAMC,SAAW,2BAInC,SAAgBE,IACVxB,KACFgB,SAASI,KAAKK,aAAa,cAAe,wBAI9C,SAAgBC,IACV1B,KACFgB,SAASI,KAAKK,aAAa,cAAe","sourcesContent":["export enum KeyCodes {\r\n  LeftArrow = 37,\r\n  UpArrow = 38,\r\n  RightArrow = 39,\r\n  DownArrow = 40,\r\n  Backspace = 8,\r\n  Tab = 9,\r\n  Enter = 13,\r\n  Escape = 27\r\n}\r\n\r\nexport function trapTabFocus(elm: HTMLElement) {\r\n  const focusableEls = elm.querySelectorAll(\r\n    'a, object, input, button, iframe, [tabindex]'\r\n  );\r\n  const firstFocusableEl = focusableEls[0] as HTMLElement;\r\n  const lastFocusableEl = focusableEls[focusableEls.length - 1] as HTMLElement;\r\n\r\n  // if just a single focusable item focus it\r\n  if (firstFocusableEl) {\r\n    firstFocusableEl.focus();\r\n  }\r\n\r\n  // if two or more focusable items create focus loop\r\n  if (firstFocusableEl && lastFocusableEl) {\r\n    elm.addEventListener('keydown', e => {\r\n      const isTabPressed = e.key === 'Tab' || e.keyCode === KeyCodes.Tab;\r\n\r\n      if (!isTabPressed) {\r\n        return;\r\n      }\r\n\r\n      if (e.shiftKey && document.activeElement === firstFocusableEl) {\r\n        lastFocusableEl.focus();\r\n        e.preventDefault();\r\n      } else {\r\n        if (document.activeElement === lastFocusableEl) {\r\n          firstFocusableEl.focus();\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function isBrowser() {\r\n  return typeof window !== 'undefined';\r\n}\r\n\r\nexport function lockScroll() {\r\n  if (isBrowser()) {\r\n    document.body.style.overflow = 'hidden';\r\n  }\r\n}\r\n\r\nexport function unlockScroll() {\r\n  if (isBrowser()) {\r\n    document.body.style.overflow = 'initial';\r\n  }\r\n}\r\n\r\nexport function ariaHideBody() {\r\n  if (isBrowser()) {\r\n    document.body.setAttribute('aria-hidden', 'true');\r\n  }\r\n}\r\n\r\nexport function ariaShowBody() {\r\n  if (isBrowser()) {\r\n    document.body.setAttribute('aria-hidden', 'false');\r\n  }\r\n}\r\n"]}