/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var KeyCodes = {
    LeftArrow: 37,
    UpArrow: 38,
    RightArrow: 39,
    DownArrow: 40,
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Escape: 27,
};
export { KeyCodes };
KeyCodes[KeyCodes.LeftArrow] = 'LeftArrow';
KeyCodes[KeyCodes.UpArrow] = 'UpArrow';
KeyCodes[KeyCodes.RightArrow] = 'RightArrow';
KeyCodes[KeyCodes.DownArrow] = 'DownArrow';
KeyCodes[KeyCodes.Backspace] = 'Backspace';
KeyCodes[KeyCodes.Tab] = 'Tab';
KeyCodes[KeyCodes.Enter] = 'Enter';
KeyCodes[KeyCodes.Escape] = 'Escape';
/**
 * @param {?} elm
 * @return {?}
 */
export function trapTabFocus(elm) {
    /** @type {?} */
    var focusableEls = elm.querySelectorAll('a, object, input, button, iframe, [tabindex]');
    /** @type {?} */
    var firstFocusableEl = /** @type {?} */ (focusableEls[0]);
    /** @type {?} */
    var lastFocusableEl = /** @type {?} */ (focusableEls[focusableEls.length - 1]);
    // if just a single focusable item focus it
    if (firstFocusableEl) {
        firstFocusableEl.focus();
    }
    // if two or more focusable items create focus loop
    if (firstFocusableEl && lastFocusableEl) {
        elm.addEventListener('keydown', function (e) {
            /** @type {?} */
            var isTabPressed = e.key === 'Tab' || e.keyCode === KeyCodes.Tab;
            if (!isTabPressed) {
                return;
            }
            if (e.shiftKey && document.activeElement === firstFocusableEl) {
                lastFocusableEl.focus();
                e.preventDefault();
            }
            else {
                if (document.activeElement === lastFocusableEl) {
                    firstFocusableEl.focus();
                    e.preventDefault();
                }
            }
        });
    }
}
/**
 * @return {?}
 */
export function isBrowser() {
    return typeof window !== 'undefined';
}
/**
 * @return {?}
 */
export function lockScroll() {
    if (isBrowser()) {
        document.body.style.overflow = 'hidden';
    }
}
/**
 * @return {?}
 */
export function unlockScroll() {
    if (isBrowser()) {
        document.body.style.overflow = 'initial';
    }
}
/**
 * @return {?}
 */
export function ariaHideBody() {
    if (isBrowser()) {
        document.body.setAttribute('aria-hidden', 'true');
    }
}
/**
 * @return {?}
 */
export function ariaShowBody() {
    if (isBrowser()) {
        document.body.setAttribute('aria-hidden', 'false');
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtbGl0ZS91dGlsLyIsInNvdXJjZXMiOlsicHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7SUFDRSxhQUFjO0lBQ2QsV0FBWTtJQUNaLGNBQWU7SUFDZixhQUFjO0lBQ2QsWUFBYTtJQUNiLE1BQU87SUFDUCxTQUFVO0lBQ1YsVUFBVzs7O2tCQVBYLFNBQVM7a0JBQ1QsT0FBTztrQkFDUCxVQUFVO2tCQUNWLFNBQVM7a0JBQ1QsU0FBUztrQkFDVCxHQUFHO2tCQUNILEtBQUs7a0JBQ0wsTUFBTTs7Ozs7QUFHUixNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQWdCOztJQUMzQyxJQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQ3ZDLDhDQUE4QyxDQUMvQyxDQUFDOztJQUNGLElBQU0sZ0JBQWdCLHFCQUFHLFlBQVksQ0FBQyxDQUFDLENBQWdCLEVBQUM7O0lBQ3hELElBQU0sZUFBZSxxQkFBRyxZQUFZLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQWdCLEVBQUM7O0lBRzdFLElBQUksZ0JBQWdCLEVBQUU7UUFDcEIsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDMUI7O0lBR0QsSUFBSSxnQkFBZ0IsSUFBSSxlQUFlLEVBQUU7UUFDdkMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFBLENBQUM7O1lBQy9CLElBQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUVuRSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQixPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLGFBQWEsS0FBSyxnQkFBZ0IsRUFBRTtnQkFDN0QsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUN4QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0wsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLGVBQWUsRUFBRTtvQkFDOUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ3pCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztpQkFDcEI7YUFDRjtTQUNGLENBQUMsQ0FBQztLQUNKO0NBQ0Y7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUztJQUN2QixPQUFPLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQztDQUN0Qzs7OztBQUVELE1BQU0sVUFBVSxVQUFVO0lBQ3hCLElBQUksU0FBUyxFQUFFLEVBQUU7UUFDZixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQ3pDO0NBQ0Y7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWTtJQUMxQixJQUFJLFNBQVMsRUFBRSxFQUFFO1FBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztLQUMxQztDQUNGOzs7O0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDMUIsSUFBSSxTQUFTLEVBQUUsRUFBRTtRQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNuRDtDQUNGOzs7O0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDMUIsSUFBSSxTQUFTLEVBQUUsRUFBRTtRQUNmLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNwRDtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gS2V5Q29kZXMge1xyXG4gIExlZnRBcnJvdyA9IDM3LFxyXG4gIFVwQXJyb3cgPSAzOCxcclxuICBSaWdodEFycm93ID0gMzksXHJcbiAgRG93bkFycm93ID0gNDAsXHJcbiAgQmFja3NwYWNlID0gOCxcclxuICBUYWIgPSA5LFxyXG4gIEVudGVyID0gMTMsXHJcbiAgRXNjYXBlID0gMjdcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYXBUYWJGb2N1cyhlbG06IEhUTUxFbGVtZW50KSB7XHJcbiAgY29uc3QgZm9jdXNhYmxlRWxzID0gZWxtLnF1ZXJ5U2VsZWN0b3JBbGwoXHJcbiAgICAnYSwgb2JqZWN0LCBpbnB1dCwgYnV0dG9uLCBpZnJhbWUsIFt0YWJpbmRleF0nXHJcbiAgKTtcclxuICBjb25zdCBmaXJzdEZvY3VzYWJsZUVsID0gZm9jdXNhYmxlRWxzWzBdIGFzIEhUTUxFbGVtZW50O1xyXG4gIGNvbnN0IGxhc3RGb2N1c2FibGVFbCA9IGZvY3VzYWJsZUVsc1tmb2N1c2FibGVFbHMubGVuZ3RoIC0gMV0gYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8vIGlmIGp1c3QgYSBzaW5nbGUgZm9jdXNhYmxlIGl0ZW0gZm9jdXMgaXRcclxuICBpZiAoZmlyc3RGb2N1c2FibGVFbCkge1xyXG4gICAgZmlyc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgLy8gaWYgdHdvIG9yIG1vcmUgZm9jdXNhYmxlIGl0ZW1zIGNyZWF0ZSBmb2N1cyBsb29wXHJcbiAgaWYgKGZpcnN0Rm9jdXNhYmxlRWwgJiYgbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xyXG4gICAgICBjb25zdCBpc1RhYlByZXNzZWQgPSBlLmtleSA9PT0gJ1RhYicgfHwgZS5rZXlDb2RlID09PSBLZXlDb2Rlcy5UYWI7XHJcblxyXG4gICAgICBpZiAoIWlzVGFiUHJlc3NlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGUuc2hpZnRLZXkgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZmlyc3RGb2N1c2FibGVFbCkge1xyXG4gICAgICAgIGxhc3RGb2N1c2FibGVFbC5mb2N1cygpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gbGFzdEZvY3VzYWJsZUVsKSB7XHJcbiAgICAgICAgICBmaXJzdEZvY3VzYWJsZUVsLmZvY3VzKCk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9ja1Njcm9sbCgpIHtcclxuICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1bmxvY2tTY3JvbGwoKSB7XHJcbiAgaWYgKGlzQnJvd3NlcigpKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2luaXRpYWwnO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRlQm9keSgpIHtcclxuICBpZiAoaXNCcm93c2VyKCkpIHtcclxuICAgIGRvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJpYVNob3dCb2R5KCkge1xyXG4gIGlmIChpc0Jyb3dzZXIoKSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==