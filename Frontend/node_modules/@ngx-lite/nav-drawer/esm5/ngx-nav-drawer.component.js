/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectorRef, PLATFORM_ID, Inject, HostListener, ViewChild, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { fromEvent } from 'rxjs';
import { trapTabFocus, KeyCodes } from '@ngx-lite/util';
var NgxNavDrawerComponent = /** @class */ (function () {
    function NgxNavDrawerComponent(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    Object.defineProperty(NgxNavDrawerComponent.prototype, "open", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.show = value;
            this.openChange.emit(this.show);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return _this.setFixedPosition();
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.rootClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.lastFocusedElement = event.target;
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.focus();
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.outerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.setFixedPosition = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia("(min-width: " + this.fixedAtWidth + ")").matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (this.show) {
            trapTabFocus(this.nav.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    };
    NgxNavDrawerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-nav-drawer',
                    template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["*,::after,::before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:rgba(0,0,0,.5);display:none}.ngx-nav-drawer{top:0;bottom:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:0 0;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"]
                }] }
    ];
    /** @nocollapse */
    NgxNavDrawerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ChangeDetectorRef }
    ]; };
    NgxNavDrawerComponent.propDecorators = {
        openChange: [{ type: Output }],
        open: [{ type: Input }],
        fixed: [{ type: Input }],
        fixedAtWidth: [{ type: Input }],
        nav: [{ type: ViewChild, args: ['nav', { static: false },] }],
        rootClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
        outerClick: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
    };
    return NgxNavDrawerComponent;
}());
export { NgxNavDrawerComponent };
if (false) {
    /** @type {?} */
    NgxNavDrawerComponent.prototype.openChange;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixed;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixedAtWidth;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.nav;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.show;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixedMode;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.lastFocusedElement;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW5hdi1kcmF3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1saXRlL25hdi1kcmF3ZXIvIiwic291cmNlcyI6WyJuZ3gtbmF2LWRyYXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUdMLE1BQU0sRUFDTixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsVUFBVSxFQUVWLHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUUvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhEO0lBd0JFLCtCQUMrQixVQUFlLEVBQ3BDLGlCQUFvQztRQURmLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQWxCcEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFPMUMsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLGlCQUFZLEdBQUcsUUFBUSxDQUFDO1FBR2pDLFNBQUksR0FBRyxLQUFLLENBQUM7UUFDYixjQUFTLEdBQUcsS0FBSyxDQUFDO0lBT2YsQ0FBQztJQWxCSixzQkFDSSx1Q0FBSTs7Ozs7UUFEUixVQUNTLEtBQWM7WUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7WUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLENBQUM7OztPQUFBOzs7O0lBZ0JELHdDQUFROzs7SUFBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxp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dUI7O0lBQ3ZCLDZDQUFpQzs7SUFDakMsb0NBQXFEOztJQUVyRCxxQ0FBYTs7SUFDYiwwQ0FBa0I7Ozs7O0lBQ2xCLDZDQUFtQzs7Ozs7SUFDbkMsbURBQXdDOzs7OztJQUd0QywyQ0FBNEM7Ozs7O0lBQzVDLGtEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBQTEFURk9STV9JRCxcbiAgSW5qZWN0LFxuICBIb3N0TGlzdGVuZXIsXG4gIFZpZXdDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgT25DaGFuZ2VzLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGZyb21FdmVudCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IHRyYXBUYWJGb2N1cywgS2V5Q29kZXMgfSBmcm9tICdAbmd4LWxpdGUvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1uYXYtZHJhd2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL25neC1uYXYtZHJhd2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmd4LW5hdi1kcmF3ZXIuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTmd4TmF2RHJhd2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBPdXRwdXQoKSBvcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBASW5wdXQoKVxuICBzZXQgb3Blbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuc2hvdyA9IHZhbHVlO1xuICAgIHRoaXMub3BlbkNoYW5nZS5lbWl0KHRoaXMuc2hvdyk7XG4gIH1cblxuICBASW5wdXQoKSBmaXhlZCA9IGZhbHNlO1xuICBASW5wdXQoKSBmaXhlZEF0V2lkdGggPSAnMTAyNHB4JztcbiAgQFZpZXdDaGlsZCgnbmF2JywgeyBzdGF0aWM6IGZhbHNlIH0pIG5hdjogRWxlbWVudFJlZjtcblxuICBzaG93ID0gZmFsc2U7XG4gIGZpeGVkTW9kZSA9IGZhbHNlO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICBwcml2YXRlIGxhc3RGb2N1c2VkRWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBhbnksXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLnNldEZpeGVkUG9zaXRpb24oKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpLnN1YnNjcmliZShldmVudCA9PlxuICAgICAgICB0aGlzLnNldEZpeGVkUG9zaXRpb24oKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50J10pXG4gIHJvb3RDbGljayhldmVudCkge1xuICAgIHRoaXMubGFzdEZvY3VzZWRFbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzprZXl1cCcsIFsnJGV2ZW50J10pXG4gIG91dGVyQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS2V5Q29kZXMuRXNjYXBlICYmIHRoaXMuc2hvdyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICB9XG4gIH1cblxuICBzZXRGaXhlZFBvc2l0aW9uKCkge1xuICAgIGlmIChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3RoaXMuZml4ZWRBdFdpZHRofSlgKS5tYXRjaGVzICYmXG4gICAgICAgIHRoaXMuZml4ZWRcbiAgICAgICkge1xuICAgICAgICB0aGlzLmZpeGVkTW9kZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZpeGVkTW9kZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKCF0aGlzLmZpeGVkTW9kZSkge1xuICAgICAgdGhpcy5zaG93ID0gIXRoaXMuc2hvdztcbiAgICAgIHRoaXMub3BlbkNoYW5nZS5lbWl0KHRoaXMuc2hvdyk7XG4gICAgfVxuXG4gICAgdGhpcy5mb2N1cygpO1xuICB9XG5cbiAgZm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuc2hvdykge1xuICAgICAgdHJhcFRhYkZvY3VzKHRoaXMubmF2Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sYXN0Rm9jdXNlZEVsZW1lbnQpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzZWRFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG59XG4iXX0=