{"version":3,"sources":["ng://@ngx-lite/nav-drawer/ngx-nav-drawer.component.ts","ng://@ngx-lite/nav-drawer/ngx-nav-drawer.module.ts"],"names":["NgxNavDrawerComponent","platformId","changeDetectorRef","this","openChange","EventEmitter","fixed","fixedAtWidth","show","fixedMode","Object","defineProperty","prototype","value","emit","ngOnInit","_this","isPlatformBrowser","setFixedPosition","subscription","fromEvent","window","subscribe","event","rootClick","lastFocusedElement","target","ngOnChanges","focus","ngOnDestroy","unsubscribe","outerClick","keyCode","KeyCodes","Escape","toggle","matchMedia","matches","detectChanges","trapTabFocus","nav","nativeElement","Component","args","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","Inject","PLATFORM_ID","ChangeDetectorRef","Output","Input","ViewChild","static","HostListener","NgxNavDrawerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"mdAAA,IAAAA,EAAA,WA8CE,SAAAA,EAC+BC,EACrBC,GADqBC,KAAAF,WAAAA,EACrBE,KAAAD,kBAAAA,EAlBAC,KAAAC,WAAa,IAAIC,EAAAA,aAOlBF,KAAAG,OAAQ,EACRH,KAAAI,aAAe,SAGxBJ,KAAAK,MAAO,EACPL,KAAAM,WAAY,EAuEd,OAlFEC,OAAAC,eACIX,EAAAY,UAAA,OAAI,KADR,SACSC,GACPV,KAAKK,KAAOK,EACZV,KAAKC,WAAWU,KAAKX,KAAKK,uCAiB5BR,EAAAY,UAAAG,SAAA,WAAA,IAAAC,EAAAb,KACMc,EAAAA,kBAAkBd,KAAKF,cACzBE,KAAKe,mBACLf,KAAKgB,aAAeC,EAAAA,UAAUC,OAAQ,UAAUC,UAAS,SAACC,GACxD,OAAAP,EAAKE,uBAMXlB,EAAAY,UAAAY,UADA,SACUD,GACRpB,KAAKsB,mBAAqBF,EAAMG,QAGlC1B,EAAAY,UAAAe,YAAA,WACExB,KAAKyB,SAGP5B,EAAAY,UAAAiB,YAAA,WACM1B,KAAKgB,cACPhB,KAAKgB,aAAaW,eAKtB9B,EAAAY,UAAAmB,WADA,SACWR,GACLA,EAAMS,UAAYC,EAAAA,SAASC,SAAwB,IAAd/B,KAAKK,MAC5CL,KAAKgC,UAITnC,EAAAY,UAAAM,iBAAA,WACMD,EAAAA,kBAAkBd,KAAKF,cAEvBoB,OAAOe,WAAW,eAAejC,KAAKI,aAAY,KAAK8B,SACvDlC,KAAKG,MAELH,KAAKM,WAAY,EAEjBN,KAAKM,WAAY,EAGnBN,KAAKD,kBAAkBoC,kBAI3BtC,EAAAY,UAAAuB,OAAA,WACOhC,KAAKM,YACRN,KAAKK,MAAQL,KAAKK,KAClBL,KAAKC,WAAWU,KAAKX,KAAKK,OAG5BL,KAAKyB,SAGP5B,EAAAY,UAAAgB,MAAA,WACMzB,KAAKK,KACP+B,EAAAA,aAAapC,KAAKqC,IAAIC,eACbtC,KAAKsB,oBACdtB,KAAKsB,mBAAmBG,6BAxF7Bc,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iBACVC,SAAA,2RAEAC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,miCAoBtCC,EAAAA,OAAMT,KAAA,CAACU,EAAAA,sBAvCVC,EAAAA,yDAsBCC,EAAAA,qBACAC,EAAAA,qBAMAA,EAAAA,4BACAA,EAAAA,mBACAC,EAAAA,UAASd,KAAA,CAAC,MAAO,CAAEe,UAAQ,uBAqB3BC,EAAAA,aAAYhB,KAAA,CAAC,iBAAkB,CAAC,+BAehCgB,EAAAA,aAAYhB,KAAA,CAAC,eAAgB,CAAC,cAsCjC3C,EAjHA,GCAA4D,EAAA,WAIA,SAAAA,KAKiC,2BALhCC,EAAAA,SAAQlB,KAAA,CAAC,CACRmB,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAChE,GACfiE,QAAS,CAACjE,OAEqB4D,EATjC","sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  PLATFORM_ID,\n  Inject,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { fromEvent, Subscription } from 'rxjs';\n\nimport { trapTabFocus, KeyCodes } from '@ngx-lite/util';\n\n@Component({\n  selector: 'ngx-nav-drawer',\n  templateUrl: './ngx-nav-drawer.component.html',\n  styleUrls: ['./ngx-nav-drawer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxNavDrawerComponent implements OnChanges, OnDestroy, OnInit {\n  @Output() openChange = new EventEmitter<boolean>();\n  @Input()\n  set open(value: boolean) {\n    this.show = value;\n    this.openChange.emit(this.show);\n  }\n\n  @Input() fixed = false;\n  @Input() fixedAtWidth = '1024px';\n  @ViewChild('nav', { static: false }) nav: ElementRef;\n\n  show = false;\n  fixedMode = false;\n  private subscription: Subscription;\n  private lastFocusedElement: HTMLElement;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.setFixedPosition();\n      this.subscription = fromEvent(window, 'resize').subscribe(event =>\n        this.setFixedPosition()\n      );\n    }\n  }\n\n  @HostListener('document:click', ['$event'])\n  rootClick(event) {\n    this.lastFocusedElement = event.target;\n  }\n\n  ngOnChanges() {\n    this.focus();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  @HostListener('window:keyup', ['$event'])\n  outerClick(event) {\n    if (event.keyCode === KeyCodes.Escape && this.show === true) {\n      this.toggle();\n    }\n  }\n\n  setFixedPosition() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (\n        window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches &&\n        this.fixed\n      ) {\n        this.fixedMode = true;\n      } else {\n        this.fixedMode = false;\n      }\n\n      this.changeDetectorRef.detectChanges();\n    }\n  }\n\n  toggle() {\n    if (!this.fixedMode) {\n      this.show = !this.show;\n      this.openChange.emit(this.show);\n    }\n\n    this.focus();\n  }\n\n  focus() {\n    if (this.show) {\n      trapTabFocus(this.nav.nativeElement);\n    } else if (this.lastFocusedElement) {\n      this.lastFocusedElement.focus();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxNavDrawerComponent } from './ngx-nav-drawer.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxNavDrawerComponent],\n  exports: [NgxNavDrawerComponent]\n})\nexport class NgxNavDrawerModule {}\n"]}