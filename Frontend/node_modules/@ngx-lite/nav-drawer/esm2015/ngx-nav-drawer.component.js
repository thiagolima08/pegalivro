/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectorRef, PLATFORM_ID, Inject, HostListener, ViewChild, ElementRef, ChangeDetectionStrategy } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { fromEvent } from 'rxjs';
import { trapTabFocus, KeyCodes } from '@ngx-lite/util';
export class NgxNavDrawerComponent {
    /**
     * @param {?} platformId
     * @param {?} changeDetectorRef
     */
    constructor(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set open(value) {
        this.show = value;
        this.openChange.emit(this.show);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((/**
             * @param {?} event
             * @return {?}
             */
            event => this.setFixedPosition()));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    rootClick(event) {
        this.lastFocusedElement = event.target;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.focus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    outerClick(event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    }
    /**
     * @return {?}
     */
    setFixedPosition() {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    }
    /**
     * @return {?}
     */
    focus() {
        if (this.show) {
            trapTabFocus(this.nav.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxNavDrawerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-nav-drawer',
                template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["*,::after,::before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:rgba(0,0,0,.5);display:none}.ngx-nav-drawer{top:0;bottom:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:0 0;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"]
            }] }
];
/** @nocollapse */
NgxNavDrawerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ChangeDetectorRef }
];
NgxNavDrawerComponent.propDecorators = {
    openChange: [{ type: Output }],
    open: [{ type: Input }],
    fixed: [{ type: Input }],
    fixedAtWidth: [{ type: Input }],
    nav: [{ type: ViewChild, args: ['nav', { static: false },] }],
    rootClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
    outerClick: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgxNavDrawerComponent.prototype.openChange;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixed;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixedAtWidth;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.nav;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.show;
    /** @type {?} */
    NgxNavDrawerComponent.prototype.fixedMode;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.lastFocusedElement;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    NgxNavDrawerComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW5hdi1kcmF3ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1saXRlL25hdi1kcmF3ZXIvIiwic291cmNlcyI6WyJuZ3gtbmF2LWRyYXdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUdMLE1BQU0sRUFDTixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQixXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBQ1QsVUFBVSxFQUVWLHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUUvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBU3hELE1BQU0sT0FBTyxxQkFBcUI7Ozs7O0lBaUJoQyxZQUMrQixVQUFlLEVBQ3BDLGlCQUFvQztRQURmLGVBQVUsR0FBVixVQUFVLENBQUs7UUFDcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQWxCcEMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFPMUMsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLGlCQUFZLEdBQUcsUUFBUSxDQUFDO1FBR2pDLFNBQUksR0FBRyxLQUFLLENBQUM7UUFDYixjQUFTLEdBQUcsS0FBSyxDQUFDO0lBT2YsQ0FBQzs7Ozs7SUFsQkosSUFDSSxJQUFJLENBQUMsS0FBYztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQWdCRCxRQUFRO1FBQ04sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFNBQVM7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUNoRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFDeEIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFHRCxTQUFTLENBQUMsS0FBSztRQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7Ozs7O0lBR0QsVUFBVSxDQUFDLEtBQUs7UUFDZCxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUMzRCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7Ozs7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxJQUNFLE1BQU0sQ0FBQyxVQUFVLENBQUMsZUFBZSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxPQUFPO2dCQUM5RCxJQUFJLENBQUMsS0FBSyxFQUNWO2dCQUNBLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2FBQ3hCO1lBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQzs7OztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3RDO2FBQU0sSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7O1lBMUZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixrVEFBOEM7Z0JBRTlDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7Ozs7NENBbUJJLE1BQU0sU0FBQyxXQUFXO1lBdkNyQixpQkFBaUI7Ozt5QkFzQmhCLE1BQU07bUJBQ04sS0FBSztvQkFNTCxLQUFLOzJCQUNMLEtBQUs7a0JBQ0wsU0FBUyxTQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7d0JBcUJsQyxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7eUJBZXpDLFlBQVksU0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUE3Q3hDLDJDQUFtRDs7SUFPbkQsc0NBQXVCOztJQUN2Qiw2Q0FBaUM7O0lBQ2pDLG9DQUFxRDs7SUFFckQscUNBQWE7O0lBQ2IsMENBQWtCOzs7OztJQUNsQiw2Q0FBbUM7Ozs7O0lBQ25DLG1EQUF3Qzs7Ozs7SUFHdEMsMkNBQTRDOzs7OztJQUM1QyxrREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBFdmVudEVtaXR0ZXIsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgUExBVEZPUk1fSUQsXG4gIEluamVjdCxcbiAgSG9zdExpc3RlbmVyLFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIE9uQ2hhbmdlcyxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB0cmFwVGFiRm9jdXMsIEtleUNvZGVzIH0gZnJvbSAnQG5neC1saXRlL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtbmF2LWRyYXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtbmF2LWRyYXdlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL25neC1uYXYtZHJhd2VyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIE5neE5hdkRyYXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQge1xuICBAT3V0cHV0KCkgb3BlbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcbiAgQElucHV0KClcbiAgc2V0IG9wZW4odmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNob3cgPSB2YWx1ZTtcbiAgICB0aGlzLm9wZW5DaGFuZ2UuZW1pdCh0aGlzLnNob3cpO1xuICB9XG5cbiAgQElucHV0KCkgZml4ZWQgPSBmYWxzZTtcbiAgQElucHV0KCkgZml4ZWRBdFdpZHRoID0gJzEwMjRweCc7XG4gIEBWaWV3Q2hpbGQoJ25hdicsIHsgc3RhdGljOiBmYWxzZSB9KSBuYXY6IEVsZW1lbnRSZWY7XG5cbiAgc2hvdyA9IGZhbHNlO1xuICBmaXhlZE1vZGUgPSBmYWxzZTtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBsYXN0Rm9jdXNlZEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogYW55LFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5zZXRGaXhlZFBvc2l0aW9uKCk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKS5zdWJzY3JpYmUoZXZlbnQgPT5cbiAgICAgICAgdGhpcy5zZXRGaXhlZFBvc2l0aW9uKClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICByb290Q2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLmxhc3RGb2N1c2VkRWxlbWVudCA9IGV2ZW50LnRhcmdldDtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6a2V5dXAnLCBbJyRldmVudCddKVxuICBvdXRlckNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtleUNvZGVzLkVzY2FwZSAmJiB0aGlzLnNob3cgPT09IHRydWUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuICB9XG5cbiAgc2V0Rml4ZWRQb3NpdGlvbigpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgaWYgKFxuICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt0aGlzLmZpeGVkQXRXaWR0aH0pYCkubWF0Y2hlcyAmJlxuICAgICAgICB0aGlzLmZpeGVkXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5maXhlZE1vZGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5maXhlZE1vZGUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICghdGhpcy5maXhlZE1vZGUpIHtcbiAgICAgIHRoaXMuc2hvdyA9ICF0aGlzLnNob3c7XG4gICAgICB0aGlzLm9wZW5DaGFuZ2UuZW1pdCh0aGlzLnNob3cpO1xuICAgIH1cblxuICAgIHRoaXMuZm9jdXMoKTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIGlmICh0aGlzLnNob3cpIHtcbiAgICAgIHRyYXBUYWJGb2N1cyh0aGlzLm5hdi5uYXRpdmVFbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGFzdEZvY3VzZWRFbGVtZW50KSB7XG4gICAgICB0aGlzLmxhc3RGb2N1c2VkRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxufVxuIl19