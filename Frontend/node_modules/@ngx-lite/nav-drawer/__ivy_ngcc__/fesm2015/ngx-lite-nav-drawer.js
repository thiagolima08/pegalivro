import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, PLATFORM_ID, ChangeDetectorRef, Output, Input, ViewChild, HostListener, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { fromEvent } from 'rxjs';
import { KeyCodes, trapTabFocus } from '@ngx-lite/util';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["nav"];
const _c1 = ["*"];
class NgxNavDrawerComponent {
    /**
     * @param {?} platformId
     * @param {?} changeDetectorRef
     */
    constructor(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set open(value) {
        this.show = value;
        this.openChange.emit(this.show);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((/**
             * @param {?} event
             * @return {?}
             */
            event => this.setFixedPosition()));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    rootClick(event) {
        this.lastFocusedElement = event.target;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.focus();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    outerClick(event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    }
    /**
     * @return {?}
     */
    setFixedPosition() {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia(`(min-width: ${this.fixedAtWidth})`).matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    }
    /**
     * @return {?}
     */
    focus() {
        if (this.show) {
            trapTabFocus(this.nav.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    }
}
NgxNavDrawerComponent.ɵfac = function NgxNavDrawerComponent_Factory(t) { return new (t || NgxNavDrawerComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NgxNavDrawerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxNavDrawerComponent, selectors: [["ngx-nav-drawer"]], viewQuery: function NgxNavDrawerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nav = _t.first);
    } }, hostBindings: function NgxNavDrawerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function NgxNavDrawerComponent_click_HostBindingHandler($event) { return ctx.rootClick($event); }, false, ɵngcc0.ɵɵresolveDocument)("keyup", function NgxNavDrawerComponent_keyup_HostBindingHandler($event) { return ctx.outerClick($event); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { fixed: "fixed", fixedAtWidth: "fixedAtWidth", open: "open" }, outputs: { openChange: "openChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 5, vars: 5, consts: [["nav", ""], [1, "ngx-nav-drawer-overlay", 3, "click"], [1, "ngx-nav-drawer", 3, "click"]], template: function NgxNavDrawerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", null, 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵlistener("click", function NgxNavDrawerComponent_Template_div_click_2_listener() { return ctx.toggle(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "nav", 2);
        ɵngcc0.ɵɵlistener("click", function NgxNavDrawerComponent_Template_nav_click_3_listener() { return ctx.toggle(); });
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ngx-nav-drawer-open", ctx.show)("ngx-nav-drawer-fixed", ctx.fixedMode);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵattribute("aria-hidden", !ctx.show);
    } }, styles: ["*,::after,::before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:rgba(0,0,0,.5);display:none}.ngx-nav-drawer{top:0;bottom:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:0 0;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"], encapsulation: 2, changeDetection: 0 });
/** @nocollapse */
NgxNavDrawerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ChangeDetectorRef }
];
NgxNavDrawerComponent.propDecorators = {
    openChange: [{ type: Output }],
    open: [{ type: Input }],
    fixed: [{ type: Input }],
    fixedAtWidth: [{ type: Input }],
    nav: [{ type: ViewChild, args: ['nav', { static: false },] }],
    rootClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
    outerClick: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxNavDrawerComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-nav-drawer',
                template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["*,::after,::before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:rgba(0,0,0,.5);display:none}.ngx-nav-drawer{top:0;bottom:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:0 0;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.ChangeDetectorRef }]; }, { openChange: [{
            type: Output
        }], fixed: [{
            type: Input
        }], fixedAtWidth: [{
            type: Input
        }], open: [{
            type: Input
        }], rootClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], outerClick: [{
            type: HostListener,
            args: ['window:keyup', ['$event']]
        }], nav: [{
            type: ViewChild,
            args: ['nav', { static: false }]
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxNavDrawerModule {
}
NgxNavDrawerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxNavDrawerModule });
NgxNavDrawerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxNavDrawerModule_Factory(t) { return new (t || NgxNavDrawerModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxNavDrawerModule, { declarations: function () { return [NgxNavDrawerComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxNavDrawerComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxNavDrawerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NgxNavDrawerComponent],
                exports: [NgxNavDrawerComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxNavDrawerComponent, NgxNavDrawerModule };

//# sourceMappingURL=ngx-lite-nav-drawer.js.map