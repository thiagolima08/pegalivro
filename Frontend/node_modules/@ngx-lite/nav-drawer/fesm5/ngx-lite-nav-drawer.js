import { Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, PLATFORM_ID, ChangeDetectorRef, Output, Input, ViewChild, HostListener, EventEmitter, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { fromEvent } from 'rxjs';
import { KeyCodes, trapTabFocus } from '@ngx-lite/util';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxNavDrawerComponent = /** @class */ (function () {
    function NgxNavDrawerComponent(platformId, changeDetectorRef) {
        this.platformId = platformId;
        this.changeDetectorRef = changeDetectorRef;
        this.openChange = new EventEmitter();
        this.fixed = false;
        this.fixedAtWidth = '1024px';
        this.show = false;
        this.fixedMode = false;
    }
    Object.defineProperty(NgxNavDrawerComponent.prototype, "open", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.show = value;
            this.openChange.emit(this.show);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.setFixedPosition();
            this.subscription = fromEvent(window, 'resize').subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return _this.setFixedPosition();
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.rootClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.lastFocusedElement = event.target;
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.focus();
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.outerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === KeyCodes.Escape && this.show === true) {
            this.toggle();
        }
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.setFixedPosition = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platformId)) {
            if (window.matchMedia("(min-width: " + this.fixedAtWidth + ")").matches &&
                this.fixed) {
                this.fixedMode = true;
            }
            else {
                this.fixedMode = false;
            }
            this.changeDetectorRef.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (!this.fixedMode) {
            this.show = !this.show;
            this.openChange.emit(this.show);
        }
        this.focus();
    };
    /**
     * @return {?}
     */
    NgxNavDrawerComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (this.show) {
            trapTabFocus(this.nav.nativeElement);
        }
        else if (this.lastFocusedElement) {
            this.lastFocusedElement.focus();
        }
    };
    NgxNavDrawerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-nav-drawer',
                    template: "<div #nav [class.ngx-nav-drawer-open]=\"show\" [class.ngx-nav-drawer-fixed]=\"fixedMode\">\n  <div class=\"ngx-nav-drawer-overlay\" (click)=\"toggle()\"></div>\n  <nav class=\"ngx-nav-drawer\" (click)=\"toggle()\" [attr.aria-hidden]=\"!show\">\n    <ng-content></ng-content>\n  </nav>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["*,::after,::before{box-sizing:border-box}.ngx-nav-drawer-overlay{position:fixed;top:0;left:0;z-index:3;width:100%;height:100%;background:rgba(0,0,0,.5);display:none}.ngx-nav-drawer{top:0;bottom:0;width:240px;height:100%;left:-300px;position:fixed;z-index:4;background-color:#fff;overflow-y:auto;transition:left .3s;will-change:left;border-right:1px solid #dbdbdb}.ngx-nav-drawer a,.ngx-nav-drawer button{display:block;padding:18px 13px 16px 26px;font-size:1em;text-decoration:none;color:#2d2d2d;position:relative;font-weight:700;width:100%;border:0;background:0 0;text-align:left}.ngx-nav-drawer a:active,.ngx-nav-drawer a:focus,.ngx-nav-drawer a:hover,.ngx-nav-drawer button:active,.ngx-nav-drawer button:focus,.ngx-nav-drawer button:hover{background:#f2f2f2}.ngx-nav-drawer-open .ngx-nav-drawer{left:0}.ngx-nav-drawer-open .ngx-nav-drawer-overlay{display:block}.ngx-nav-drawer-fixed .ngx-nav-drawer{left:0}.ngx-nav-drawer-fixed .ngx-nav-drawer-overlay{display:none}"]
                }] }
    ];
    /** @nocollapse */
    NgxNavDrawerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ChangeDetectorRef }
    ]; };
    NgxNavDrawerComponent.propDecorators = {
        openChange: [{ type: Output }],
        open: [{ type: Input }],
        fixed: [{ type: Input }],
        fixedAtWidth: [{ type: Input }],
        nav: [{ type: ViewChild, args: ['nav', { static: false },] }],
        rootClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
        outerClick: [{ type: HostListener, args: ['window:keyup', ['$event'],] }]
    };
    return NgxNavDrawerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxNavDrawerModule = /** @class */ (function () {
    function NgxNavDrawerModule() {
    }
    NgxNavDrawerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [NgxNavDrawerComponent],
                    exports: [NgxNavDrawerComponent]
                },] }
    ];
    return NgxNavDrawerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxNavDrawerComponent, NgxNavDrawerModule };
//# sourceMappingURL=ngx-lite-nav-drawer.js.map
